Semaine 2


Route::post('/process-electeurs/{fichier_id}', function ($fichier_id) {
$fichier = FichierElectoral::findOrFail($fichier_id);

// Lire le fichier CSV
$filePath = storage_path('app/uploads/' . $fichier->nom_fichier);
$csv = Reader::createFromPath($filePath, 'r');
$csv->setHeaderOffset(0);

$records = $csv->getRecords();

// Ins√©rer les √©lecteurs dans la table temporaire
foreach ($records as $record) {
ElecteurTemps::create([
'NumeroCarteElecteur' => $record['NumeroCarteElecteur'],
'CIN' => $record['CIN'],
'Nom' => $record['Nom'],
'Prenom' => $record['Prenom'],
'DateNaissance' => $record['DateNaissance'],
'BureauVote' => $record['BureauVote'],
'Email' => $record['Email'],
'Telephone' => $record['Telephone'],
'IDFichier' => $fichier->id
]);
}

// Mettre √† jour le statut du fichier
$fichier->update(['statut' => 'Valid√©']);

return response()->json(['message' => 'Importation des √©lecteurs r√©ussie !']);
});
{ path: 'accueil', loadComponent: () => import('./components/accueil/accueil.component').then(m =>
m.AccueilComponent), canActivate: [AuthGuard] },
{ path: '**', redirectTo: 'login' },

LoginParrain import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { loginParrain} from '../services/api';
import { Key, User } from 'lucide-react';

const LoginParrain = () => {
const navigate = useNavigate();
const [step, setStep] = useState(1);
const [credentials, setCredentials] = useState({
NumeroCarteElecteur: '',
CIN: '',
CodeAuth: '',

});
const [userData, setUserData] = useState({
Nom: '',
Prenom: '',
DateNaissance: '',
BureauVote: '',

});

const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value });
    };

    const handleVerifyIdentity = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
    const response = await loginParrain({
    NumeroCarteElecteur: credentials.NumeroCarteElecteur,
    CIN: credentials.CIN,

    });

    if (response.success) {
    setUserData({
    Nom: response.electeur.Nom,
    Prenom: response.electeur.Prenom,
    DateNaissance: response.electeur.DateNaissance,
    BureauVote: response.electeur.BureauVote,
    });
    setStep(2);
    toast.success('Identit√© v√©rifi√©e avec succ√®s');
    } else {
    toast.error(response.message || "√âlecteur introuvable");
    }
    } catch (error) {
    toast.error("Erreur lors de la v√©rification de l'identit√©");
    }
    };

    const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
    await loginParrain(credentials);
    toast.success('Authentification r√©ussie');
    navigate('/parrain');
    } catch (error) {
    toast.error("Erreur d'authentification");
    }
    };

    return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div className="sm:mx-auto sm:w-full sm:max-w-md">
            <div className="flex justify-center">
                {step === 1 ? (
                <Key className="h-12 w-12 text-indigo-600" />
                ) : (
                <User className="h-12 w-12 text-indigo-600" />
                )}
            </div>
            <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                {step === 1 ? 'V√©rification d\'Identit√©' : 'Authentification Parrainage'}
            </h2>
        </div>

        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
            <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                {step === 1 ? (
                <form onSubmit={handleVerifyIdentity}>
                    <div className="space-y-6">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">
                                Num√©ro Carte √âlecteur
                            </label>
                            <input type="text" name="NumeroCarteElecteur" required
                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
                                value={credentials.NumeroCarteElecteur} onChange={handleChange} />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700">
                                Num√©ro CNI
                            </label>
                            <input type="text" name="CIN" required
                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
                                value={credentials.CIN} onChange={handleChange} />
                        </div>

                        <button type="submit"
                            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                            V√©rifier mon identit√©
                        </button>
                    </div>
                </form>
                ) : (
                <>
                    <div className="mb-6 p-4 bg-gray-50 rounded-md">
                        <h3 className="text-lg font-medium text-gray-900 mb-2">Vos informations</h3>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                            <div>
                                <span className="text-gray-500">Nom:</span>
                                <p className="font-medium">{userData.Nom}</p>
                            </div>
                            <div>
                                <span className="text-gray-500">Pr√©nom:</span>
                                <p className="font-medium">{userData.Prenom}</p>
                            </div>
                            <div>
                                <span className="text-gray-500">Date de naissance:</span>
                                <p className="font-medium">{userData.DateNaissance}</p>
                            </div>
                            <div>
                                <span className="text-gray-500">Bureau de vote:</span>
                                <p className="font-medium">{userData.BureauVote}</p>
                            </div>
                        </div>
                    </div>

                    <form onSubmit={handleSubmit}>
                        <div className="space-y-6">
                            <div>
                                <label className="block text-sm font-medium text-gray-700">
                                    Code d'Authentification
                                </label>
                                <input type="text" name="CodeAuth" required
                                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
                                    value={credentials.CodeAuth} onChange={handleChange} />
                            </div>

                            <button type="submit"
                                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                                Acc√©der au parrainage
                            </button>
                        </div>
                    </form>
                </>
                )}

                <div className="mt-6 text-center">
                    <Link to="/" className="font-medium text-indigo-600 hover:text-indigo-500">
                    Cr√©er un compte pour parrainer
                    </Link>
                </div>
            </div>
        </div>
    </div>
    );
    };

    export default LoginParrain;
    /*import React, { useState } from 'react';
    import { useNavigate, Link } from 'react-router-dom';
    import { toast } from 'react-hot-toast';
    import { loginParrain } from '../services/api';
    import { Key, User } from 'lucide-react';

    const LoginParrain = () => {
    const navigate = useNavigate();
    const [step, setStep] = useState(1);
    const [loading, setLoading] = useState(false);
    const [credentials, setCredentials] = useState({
    NumeroCarteElecteur: '',
    CIN: '',
    CodeAuth: '',
    });
    const [userData, setUserData] = useState({
    Nom: '',
    Prenom: '',
    DateNaissance: '',
    BureauVote: '',
    });

    // üîπ Gestion des changements de formulaire
    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setCredentials({ ...credentials, [e.target.name]: e.target.value });
        };

        // üîπ V√©rification de l'identit√©
        const handleVerifyIdentity = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
        const response = await loginParrain({
        NumeroCarteElecteur: credentials.NumeroCarteElecteur,
        CIN: credentials.CIN,
        });

        console.log("R√©ponse de l'API :", response); // üîç Debugging

        if (response.success) {
        setUserData({
        Nom: response.electeur.Nom,
        Prenom: response.electeur.Prenom,
        DateNaissance: response.electeur.DateNaissance,
        BureauVote: response.electeur.BureauVote,
        });

        setStep(2);
        toast.success('Identit√© v√©rifi√©e avec succ√®s');
        } else {
        toast.error(response.message || "√âlecteur introuvable");
        }
        } catch (error) {
        toast.error("Erreur lors de la v√©rification de l'identit√©");
        console.error("Erreur API :", error); // üîç Debugging
        }
        };

        // üîπ Soumission du code d'authentification
        const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
        await loginParrain(credentials);
        toast.success('Authentification r√©ussie');
        navigate('/candidats'); // üîπ Redirection apr√®s succ√®s
        } catch (error) {
        toast.error("Erreur d'authentification");
        }
        };

        return (
        <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
            <div className="sm:mx-auto sm:w-full sm:max-w-md">
                <div className="flex justify-center">
                    {step === 1 ? (
                    <Key className="h-12 w-12 text-indigo-600" />
                    ) : (
                    <User className="h-12 w-12 text-indigo-600" />
                    )}
                </div>
                <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                    {step === 1 ? 'V√©rification d\'Identit√©' : 'Authentification Parrainage'}
                </h2>
            </div>

            <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                    {step === 1 ? (
                    <form onSubmit={handleVerifyIdentity}>
                        <div className="space-y-6">
                            <div>
                                <label className="block text-sm font-medium text-gray-700">
                                    Num√©ro Carte √âlecteur
                                </label>
                                <input type="text" name="NumeroCarteElecteur" required
                                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
                                    value={credentials.NumeroCarteElecteur} onChange={handleChange} />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700">
                                    Num√©ro CNI
                                </label>
                                <input type="text" name="CIN" required
                                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
                                    value={credentials.CIN} onChange={handleChange} />
                            </div>

                            <button type="submit"
                                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                                V√©rifier mon identit√©
                            </button>
                        </div>
                    </form>
                    ) : (
                    <>
                        <div className="mb-6 p-4 bg-gray-50 rounded-md">
                            <h3 className="text-lg font-medium text-gray-900 mb-2">Vos informations</h3>
                            <div className="grid grid-cols-2 gap-4 text-sm">
                                <div>
                                    <span className="text-gray-500">Nom:</span>
                                    <p className="font-medium">{userData.Nom}</p>
                                </div>
                                <div>
                                    <span className="text-gray-500">Pr√©nom:</span>
                                    <p className="font-medium">{userData.Prenom}</p>
                                </div>
                                <div>
                                    <span className="text-gray-500">Date de naissance:</span>
                                    <p className="font-medium">{userData.DateNaissance}</p>
                                </div>
                                <div>
                                    <span className="text-gray-500">Bureau de vote:</span>
                                    <p className="font-medium">{userData.BureauVote}</p>
                                </div>
                            </div>
                        </div>

                        <form onSubmit={handleSubmit}>
                            <div className="space-y-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700">
                                        Code d'Authentification
                                    </label>
                                    <input type="text" name="CodeAuth" required
                                        className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
                                        value={credentials.CodeAuth} onChange={handleChange} />
                                    <p className="mt-1 text-xs text-gray-500">
                                        Saisissez le code re√ßu par email et SMS lors de votre inscription
                                    </p>
                                </div>

                                <button type="submit"
                                    className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                                    Acc√©der au parrainage
                                </button>
                            </div>
                        </form>
                    </>
                    )}

                    <div className="mt-6 text-center">
                        <Link to="/" className="font-medium text-indigo-600 hover:text-indigo-500">
                        Cr√©er un compte pour parrainer
                        </Link>
                    </div>
                </div>
            </div>
        </div>
        );
        };

        export default LoginParrain; */

        /* import React, { useState, useEffect } from 'react';
        import { toast } from 'react-hot-toast';
        import { getCandidats, enregistrerParrainage } from '../services/api';
        import { Users, Check, AlertTriangle } from 'lucide-react';
        import { Link } from 'react-router-dom';
        import type { Candidats } from '../types';

        const CandidatsList = () => {
        const [candidats, setCandidats] = useState<Candidats[]>([]);
            const [selectedCandidat, setSelectedCandidat] = useState<Candidats | null>(null);
                const [codeValidation, setCodeValidation] = useState('');
                const [step, setStep] = useState(1);
                const [verificationCode, setVerificationCode] = useState('');

                useEffect(() => {
                loadCandidats();
                }, []);

                const loadCandidats = async () => {
                try {
                const response = await getCandidats();
                setCandidats(response.data);
                } catch (error) {
                toast.error('Erreur lors du chargement des candidats');
                }
                };

                const handleCandidatSelect = (candidat: Candidats) => {
                setSelectedCandidat(candidat);
                setStep(2);
                toast.success('Un code de validation √† 5 chiffres a √©t√© envoy√© √† votre email et t√©l√©phone');
                };

                const handleRequestCode = () => {
                toast.success('Un nouveau code de validation √† 5 chiffres a √©t√© envoy√©');
                };

                const handleValidation = async (e: React.FormEvent) => {
                e.preventDefault();
                if (!selectedCandidat) return;

                try {
                const response = await enregistrerParrainage({
                candidatId: selectedCandidat.id,
                codeValidation,
                });

                setVerificationCode(response.data.verificationCode);
                setStep(3);
                toast.success('Parrainage enregistr√© avec succ√®s');
                } catch (error) {
                toast.error('Erreur lors de la validation du parrainage');
                }
                };

                const handleConfirmation = () => {
                setStep(4);
                };

                return (
                <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
                    <div className="max-w-4xl mx-auto">
                        <div className="text-center">
                            <Users className="mx-auto h-12 w-12 text-indigo-600" />
                            <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
                                {step === 1 ? 'Choisissez un candidat √† parrainer' :
                                step === 2 ? 'Validation du parrainage' :
                                step === 3 ? 'Confirmation du parrainage' : 'Parrainage compl√©t√©'}
                            </h2>
                        </div>

                        {step === 1 && (
                        <div className="mt-12 grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                            {candidats.length > 0 ? (
                            candidats.map((candidat) => (
                            <div key={candidat.id}
                                className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow cursor-pointer"
                                onClick={()=> handleCandidatSelect(candidat)}
                                >
                                <img src={candidat.photo} alt={`${candidat.nom} ${candidat.prenom}`}
                                    className="w-full h-48 object-cover" />
                                <div className="p-4">
                                    <h3 className="text-lg font-medium text-gray-900">
                                        {candidat.nom} {candidat.prenom}
                                    </h3>
                                    <p className="mt-1 text-sm text-gray-500">{candidat.slogan}</p>
                                    <div className="mt-3 h-2 w-full rounded-full"
                                        style={{ backgroundColor: candidat.couleurs }}></div>
                                </div>
                            </div>
                            ))
                            ) : (
                            <p className="text-center text-gray-500">Aucun candidat disponible pour l'instant.</p>
                            )}
                        </div>
                        )}

                        {step === 2 && selectedCandidat && (
                        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                            <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                                <form onSubmit={handleValidation}>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">
                                            Code de Validation (5 chiffres)
                                        </label>
                                        <input type="text" maxLength={5} pattern="[0-9]{5}" required
                                            className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
                                            value={codeValidation} onChange={(e)=> setCodeValidation(e.target.value)}
                                        />
                                    </div>

                                    <div className="mt-2 text-right">
                                        <button type="button" className="text-sm text-indigo-600 hover:text-indigo-500"
                                            onClick={handleRequestCode}>
                                            Je n'ai pas re√ßu de code
                                        </button>
                                    </div>

                                    <div className="mt-6">
                                        <button type="submit"
                                            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                                            Valider mon parrainage
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                        )}

                        {step === 3 && selectedCandidat && (
                        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                            <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                                <div className="text-center mb-6">
                                    <div
                                        className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                                        <Check className="h-6 w-6 text-green-600" />
                                    </div>
                                    <h3 className="mt-3 text-lg font-medium text-gray-900">Confirmation requise</h3>
                                </div>

                                <div className="mt-6 flex space-x-3">
                                    <button type="button"
                                        className="flex-1 py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                                        onClick={()=> setStep(1)}
                                        >
                                        Changer de candidat
                                    </button>
                                    <button type="button"
                                        className="flex-1 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700"
                                        onClick={handleConfirmation}>
                                        Confirmer mon choix
                                    </button>
                                </div>
                            </div>
                        </div>
                        )}

                        {step === 4 && (
                        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                            <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                                <div className="text-center mb-6">
                                    <Check className="h-6 w-6 text-green-600" />
                                    <h3 className="mt-3 text-lg font-medium text-gray-900">Parrainage enregistr√© avec
                                        succ√®s</h3>
                                </div>

                                <div className="mt-6">
                                    <Link to="/">
                                    <button type="button"
                                        className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                                        Retour √† l'accueil
                                    </button>
                                    </Link>
                                </div>
                            </div>
                        </div>
                        )}
                    </div>
                </div>
                );
                };

                export default CandidatsList;
                */
    
/*import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { User } from 'lucide-react';
import { checkParrainInfo } from '../services/api';

const ParrainageForm = () => {
  const navigate = useNavigate();
  const [userData,] = useState({
    Nom: '',
    Prenom: '',
    DateNaissance: '',
    BureauVote: '',
    NumeroCarteElecteur: '',
    CIN: '',
  });

  useEffect(() => {
    // In a real app, this would fetch the user data from the API
    // based on the authenticated user's session
    toast.success('Identit√© v√©rifi√©e avec succ√®s');
  }, []);

  const handleContinue = () => {
    navigate('/candidats');
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <div className="flex justify-center">
          <User className="h-12 w-12 text-indigo-600" />
        </div>
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Vos Informations de Parrainage
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          V√©rifiez vos informations avant de continuer
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <div className="mb-6 p-4 bg-gray-50 rounded-md">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Informations personnelles</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500">Nom:</span>
                <p className="font-medium">{userData.Nom}</p>
              </div>
              <div>
                <span className="text-gray-500">Pr√©nom:</span>
                <p className="font-medium">{userData.Prenom}</p>
              </div>
              <div>
                <span className="text-gray-500">Date de naissance:</span>
                <p className="font-medium">{userData.DateNaissance}</p>
              </div>
              <div>
                <span className="text-gray-500">Bureau de vote:</span>
                <p className="font-medium">{userData.BureauVote}</p>
              </div>
            </div>
          </div>

          <div className="mb-6 p-4 bg-gray-50 rounded-md">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Informations d'identification</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500">Carte √âlecteur:</span>
                <p className="font-medium">{userData.NumeroCarteElecteur}</p>
              </div>
              <div>
                <span className="text-gray-500">Num√©ro CNI:</span>
                <p className="font-medium">{userData.CIN}</p>
              </div>
            </div>
          </div>

          <div className="mt-6">
            <button
              onClick={handleContinue}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700"
            >
              Continuer vers le parrainage
            </button>
          </div>

          <div className="mt-6 text-center">
            <Link to="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
              Retour √† la connexion
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ParrainageForm;
*/